version: '3.3'
services:
  keycloak:
    image: "keycloak/keycloak:20.0.1"
    container_name: "keycloak"
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgreskeycloak
      DB_DATABASE: ${KEYCLOAK_DATABASE_NAME}
      DB_USER: ${KEYCLOAK_DATABASE_USERNAME}
      DB_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./realm/realm.json:/opt/keycloak/data/import/realm.json
    ports:
      - 8090:8080
#    networks:
#      - ypa
#    profiles:
#      - front&back
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "500m"

  postgres:
    image: postgres:14.5-alpine3.16
    env_file:
      - .env
    environment:
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=!admin!
#      - POSTGRES_DB=admin
      #- PGDATA=/var/lib/postgresql/data/pgdata
      #- POSTGRES_DB=metastore
      POSTGRES_USER: ${KEYCLOAK_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
      POSTGRES_DB: ${KEYCLOAK_DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/postgres-init.sql:/docker-entrypoint-initdb.d/postgres-init.sql:ro
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 500M


  metastore:
    #image: hive-metastore:3.1.3
    build: ./metastore
    container_name: metastore
    ports:
      - "9083:9083"
    volumes:
      - ./metastore/metastore-site.xml:/usr/local/metastore/conf/metastore-site.xml:ro
    logging:
      options:
        max-size: "5MB"
        max-file: "5"
    depends_on:
        - postgres


  minio:
    image: minio/minio:RELEASE.2024-09-09T16-59-28Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
      #- "9002:9002"  # HTTPS port
    volumes:
      - minio-data:/data
      #- ./certs:/etc/minio  # Mount the folder containing certificate.pem and key.pem
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
      #MINIO_ROOT_USER: minio
      #MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ":9001" #/certs --certs-dir
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G

  trino-coordinator:
    container_name: trino
    image: "trinodb/trino:457"
    ports:
      - '5542:5542'
    volumes:
      - ./trino/coordinator/etc:/etc/trino:ro
      - trino-coordinator-data:/data/trino
    depends_on:
      - metastore
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 3G

  trino-worker:
    image: "trinodb/trino:457"
    volumes:
      - ./trino/worker/etc:/etc/trino:ro
      - trino-worker-data:/data/trino
    depends_on:
      - metastore
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: "1.0"
          memory: 6G

  superset:
    build: ./superset
    container_name: superset
    ports:
      - "8088:8088"
    volumes:
      - superset-data:/app/superset_home
    #To create the db and default admin user and not interrupt the server
    #To create the db and default admin user, import the previously exported permissions and not interrupt the server
    #Check the Readme for instruction on how to export Roles & Permissions
    command: [ "/bin/bash", "-c", " pwd && ls -l && ./bootstrap-superset.sh && superset fab import-roles -p ./roles_export.json && /usr/bin/run-server.sh" ]
    #command: [ "/bin/bash", "-c", " pwd && ls -l && ./bootstrap-superset.sh && /usr/bin/run-server.sh" ]
    environment:
      - SUPERSET_SECRET_KEY=24865129682968Aa!
      - SUPERSET_HOME=/app/superset_home
      - SUPERSET_CONFIG_PATH=/app/superset_config.py
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G


  #The Backend of our application
  quarkus-backend:
    build:
      context: .
      dockerfile: src/main/docker/Dockerfile.backend
    container_name: "quarkus-backend"
    env_file: .env
    ports:
      - '8080:8080'
    #networks:
    #  - signals2
    #To sync time of host with backend
    volumes:
      - "/etc/timezone:/etc/timezone:ro"
      - "/etc/localtime:/etc/localtime:ro"
    #profiles:
    #  - prod
    #  - stage
    #  - stats
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "500m"

  #Signals Frontend
  vue-frontend:
    build:
      context: .
      dockerfile: ./src/main/vue-app/Dockerfile.frontend
    container_name: "vue-frontend"
    env_file: .env
    depends_on:
      - quarkus-backend
    ports:
      - '80:8081'
      #- '443:1443'
    #    #We need to have the server certificates for https to our own containerized ngninx
    #profiles:
    #  - prod
    #  - stage
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "500m"

volumes:
  minio-data:
    driver: local
  postgres-data:
    driver: local
  superset-data:
    driver: local
  trino-worker-data:
    driver: local
  trino-coordinator-data:
    driver: local
